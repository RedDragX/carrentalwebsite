import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { z } from "zod";
import {
  insertUserSchema,
  insertBookingSchema,
  insertReviewSchema,
} from "@shared/schema";
import { log } from "./vite";

export async function registerRoutes(app: Express): Promise<Server> {
  // Car routes
  app.get("/api/cars", async (req: Request, res: Response) => {
    try {
      const type = req.query.type ? String(req.query.type) : undefined;
      const search = req.query.search ? String(req.query.search) : undefined;
      const limit = req.query.limit ? parseInt(String(req.query.limit)) : undefined;
      
      const cars = await storage.listCars({ type, search, limit });
      res.json({ cars });
    } catch (error) {
      console.error("Error listing cars:", error);
      res.status(500).json({ message: "Failed to list cars" });
    }
  });

  app.get("/api/cars/:id", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid car ID" });
      }
      
      const car = await storage.getCar(id);
      
      if (!car) {
        return res.status(404).json({ message: "Car not found" });
      }
      
      res.json({ car });
    } catch (error) {
      console.error("Error fetching car:", error);
      res.status(500).json({ message: "Failed to fetch car" });
    }
  });

  // Driver routes
  app.get("/api/drivers", async (req: Request, res: Response) => {
    try {
      const limit = req.query.limit ? parseInt(String(req.query.limit)) : undefined;
      const drivers = await storage.listDrivers(limit);
      res.json({ drivers });
    } catch (error) {
      console.error("Error listing drivers:", error);
      res.status(500).json({ message: "Failed to list drivers" });
    }
  });

  app.get("/api/drivers/:id", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid driver ID" });
      }
      
      const driver = await storage.getDriver(id);
      
      if (!driver) {
        return res.status(404).json({ message: "Driver not found" });
      }
      
      res.json({ driver });
    } catch (error) {
      console.error("Error fetching driver:", error);
      res.status(500).json({ message: "Failed to fetch driver" });
    }
  });

  // User registration and auth
  app.post("/api/register", async (req: Request, res: Response) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      
      // Check if username or email already exists
      const existingUsername = await storage.getUserByUsername(userData.username);
      if (existingUsername) {
        return res.status(400).json({ message: "Username already exists" });
      }
      
      const existingEmail = await storage.getUserByEmail(userData.email);
      if (existingEmail) {
        return res.status(400).json({ message: "Email already exists" });
      }
      
      // Create user
      const user = await storage.createUser(userData);
      
      // Don't return the password
      const { password, ...userWithoutPassword } = user;
      
      res.status(201).json({ 
        message: "Registration successful", 
        user: userWithoutPassword 
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "Invalid input data", 
          errors: error.errors 
        });
      }
      
      console.error("Error registering user:", error);
      res.status(500).json({ message: "Failed to register user" });
    }
  });

  app.post("/api/login", async (req: Request, res: Response) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password required" });
      }
      
      const user = await storage.getUserByUsername(username);
      
      if (!user || user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }
      
      // Don't return the password
      const { password: _, ...userWithoutPassword } = user;
      
      res.json({ 
        message: "Login successful", 
        user: userWithoutPassword 
      });
    } catch (error) {
      console.error("Error logging in:", error);
      res.status(500).json({ message: "Failed to log in" });
    }
  });

  // Booking routes
  app.post("/api/bookings", async (req: Request, res: Response) => {
    try {
      const bookingData = insertBookingSchema.parse(req.body);
      
      // Validate car exists
      const car = await storage.getCar(bookingData.carId);
      if (!car) {
        return res.status(404).json({ message: "Car not found" });
      }
      
      // Validate driver if provided
      if (bookingData.driverId) {
        const driver = await storage.getDriver(bookingData.driverId);
        if (!driver) {
          return res.status(404).json({ message: "Driver not found" });
        }
      }
      
      // Create booking
      const booking = await storage.createBooking(bookingData);
      
      res.status(201).json({ 
        message: "Booking created successfully", 
        booking 
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "Invalid input data", 
          errors: error.errors 
        });
      }
      
      console.error("Error creating booking:", error);
      res.status(500).json({ message: "Failed to create booking" });
    }
  });

  app.get("/api/bookings/user/:userId", async (req: Request, res: Response) => {
    try {
      const userId = parseInt(req.params.userId);
      
      if (isNaN(userId)) {
        return res.status(400).json({ message: "Invalid user ID" });
      }
      
      const bookings = await storage.listBookingsByUser(userId);
      res.json({ bookings });
    } catch (error) {
      console.error("Error fetching user bookings:", error);
      res.status(500).json({ message: "Failed to fetch bookings" });
    }
  });

  // Review routes
  app.post("/api/reviews", async (req: Request, res: Response) => {
    try {
      const reviewData = insertReviewSchema.parse(req.body);
      
      // Create review and update ratings
      const review = await storage.createReview(reviewData);
      
      res.status(201).json({ 
        message: "Review submitted successfully", 
        review 
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          message: "Invalid input data", 
          errors: error.errors 
        });
      }
      
      console.error("Error creating review:", error);
      res.status(500).json({ message: "Failed to submit review" });
    }
  });

  app.get("/api/reviews/car/:carId", async (req: Request, res: Response) => {
    try {
      const carId = parseInt(req.params.carId);
      
      if (isNaN(carId)) {
        return res.status(400).json({ message: "Invalid car ID" });
      }
      
      const reviews = await storage.listReviewsByCar(carId);
      res.json({ reviews });
    } catch (error) {
      console.error("Error fetching car reviews:", error);
      res.status(500).json({ message: "Failed to fetch reviews" });
    }
  });

  app.get("/api/reviews/driver/:driverId", async (req: Request, res: Response) => {
    try {
      const driverId = parseInt(req.params.driverId);
      
      if (isNaN(driverId)) {
        return res.status(400).json({ message: "Invalid driver ID" });
      }
      
      const reviews = await storage.listReviewsByDriver(driverId);
      res.json({ reviews });
    } catch (error) {
      console.error("Error fetching driver reviews:", error);
      res.status(500).json({ message: "Failed to fetch reviews" });
    }
  });
  
  // AI-powered driver review system
  
  // Analyze a review using NLP
  app.post("/api/ai/analyze-review", async (req: Request, res: Response) => {
    try {
      const { review, driverId } = req.body;
      
      if (!review || !driverId) {
        return res.status(400).json({ message: "Review text and driver ID are required" });
      }
      
      // Get driver info
      const driver = await storage.getDriver(parseInt(driverId));
      if (!driver) {
        return res.status(404).json({ message: "Driver not found" });
      }
      
      // Simulate NLP analysis
      const analysis = simulateNLPAnalysis(review, driver);
      
      log(`AI analyzed review for driver ${driver.name}: ${JSON.stringify(analysis)}`, "ai");
      res.json(analysis);
    } catch (error) {
      console.error("Error analyzing review:", error);
      res.status(500).json({ message: "Failed to analyze review" });
    }
  });
  
  // Generate AI review for driver
  app.get("/api/ai/generate-review/:driverId", async (req: Request, res: Response) => {
    try {
      const driverId = parseInt(req.params.driverId);
      
      if (isNaN(driverId)) {
        return res.status(400).json({ message: "Invalid driver ID" });
      }
      
      // Get driver info
      const driver = await storage.getDriver(driverId);
      if (!driver) {
        return res.status(404).json({ message: "Driver not found" });
      }
      
      // Simulate AI-generated review
      const aiReview = generateAIReview(driver);
      
      log(`AI generated review for driver ${driver.name}: ${aiReview}`, "ai");
      res.json({
        driver_id: driver.id,
        driver_name: driver.name,
        ai_generated_review: aiReview
      });
    } catch (error) {
      console.error("Error generating AI review:", error);
      res.status(500).json({ message: "Failed to generate AI review" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

// Simulated NLP functions for driver reviews

interface SkillAnalysis {
  driving_skill: number;
  communication: number;
  punctuality: number;
  professionalism: number;
  vehicle_condition: number;
}

interface NLPResult {
  driver_id: number;
  driver_name: string;
  sentiment_score: number;
  skill_analysis: SkillAnalysis;
  insights: string[];
  recommendations: string[];
}

// Simulated NLP analysis function
function simulateNLPAnalysis(text: string, driver: any): NLPResult {
  const positiveWords = [
    "excellent", "amazing", "outstanding", "brilliant", "exceptional",
    "great", "good", "awesome", "fantastic", "wonderful", "professional",
    "helpful", "friendly", "polite", "courteous", "reliable", "punctual",
    "timely", "safe", "clean", "comfortable", "responsive", "attentive",
    "skilled", "expert", "knowledgeable", "experienced", "efficient"
  ];
  
  const negativeWords = [
    "poor", "bad", "terrible", "awful", "horrible", "disappointing",
    "rude", "unprofessional", "unreliable", "late", "dirty", "unsafe",
    "uncomfortable", "slow", "unresponsive", "careless", "inexperienced",
    "inefficient", "dangerous", "aggressive", "unprepared", "confused"
  ];
  
  const skillWords: Record<keyof SkillAnalysis, string[]> = {
    driving_skill: ["drive", "driving", "skill", "control", "maneuver", "handling", "navigate"],
    communication: ["communicate", "communication", "response", "responsive", "talk", "explain", "update"],
    punctuality: ["punctual", "time", "early", "late", "delay", "wait", "schedule", "arrival"],
    professionalism: ["professional", "manner", "conduct", "behavior", "attitude", "respectful", "courteous"],
    vehicle_condition: ["car", "vehicle", "clean", "maintained", "condition", "interior", "exterior"]
  };
  
  // Convert text to lowercase for case-insensitive matching
  const lowerText = text.toLowerCase();
  
  // Calculate sentiment
  let positiveCount = 0;
  let negativeCount = 0;
  
  positiveWords.forEach(word => {
    if (lowerText.includes(word)) positiveCount++;
  });
  
  negativeWords.forEach(word => {
    if (lowerText.includes(word)) negativeCount++;
  });
  
  // Calculate sentiment score (1-5 scale)
  const sentimentDiff = positiveCount - negativeCount;
  let sentimentScore = 3; // Neutral baseline
  
  if (sentimentDiff > 0) {
    sentimentScore = Math.min(5, 3 + sentimentDiff * 0.5);
  } else if (sentimentDiff < 0) {
    sentimentScore = Math.max(1, 3 + sentimentDiff * 0.5);
  }
  
  // Analyze skills
  const skillScores: SkillAnalysis = {
    driving_skill: 3,
    communication: 3,
    punctuality: 3,
    professionalism: 3,
    vehicle_condition: 3
  };
  
  // Adjust skill scores based on text analysis
  Object.entries(skillWords).forEach(([skill, keywords]) => {
    let skillMentions = 0;
    keywords.forEach(keyword => {
      if (lowerText.includes(keyword)) skillMentions++;
    });
    
    if (skillMentions > 0) {
      // Adjust the score based on sentiment and mentions
      const skillKey = skill as keyof SkillAnalysis;
      if (sentimentScore > 3) {
        skillScores[skillKey] = Math.min(5, 3 + skillMentions * 0.5);
      } else if (sentimentScore < 3) {
        skillScores[skillKey] = Math.max(1, 3 - skillMentions * 0.5);
      }
    }
  });
  
  // Generate insights
  const insights: string[] = [];
  
  // Experience-based insights
  if (driver.experience > 5) {
    insights.push(`${driver.name}'s ${driver.experience} years of experience clearly shows in their driving skills.`);
  }
  
  // Sentiment-based insights
  if (sentimentScore > 4) {
    insights.push("Passengers consistently rate this driver very highly.");
  } else if (sentimentScore < 2) {
    insights.push("There may be some areas where this driver could improve.");
  }
  
  // Skill-based insights
  const topSkill = Object.entries(skillScores).reduce(
    (best, [skill, score]) => score > best[1] ? [skill, score] : best,
    ["", 0]
  );
  
  if (topSkill[1] > 3) {
    const skillName = (topSkill[0] as string).replace("_", " ").replace(/\b\w/g, l => l.toUpperCase());
    insights.push(`${skillName} is this driver's strongest attribute based on passenger reviews.`);
  }
  
  // Generate recommendations
  const recommendations: string[] = [];
  
  const lowestSkill = Object.entries(skillScores).reduce(
    (worst, [skill, score]) => score < worst[1] ? [skill, score] : worst,
    ["", 5]
  );
  
  if (lowestSkill[1] < 4) {
    const skillName = (lowestSkill[0] as string).replace("_", " ").replace(/\b\w/g, l => l.toUpperCase());
    recommendations.push(`Consider focusing on improving ${skillName} for better passenger satisfaction.`);
  }
  
  // If the driver is highly rated, still provide some meaningful recommendation
  if (sentimentScore > 4 && recommendations.length === 0) {
    recommendations.push("Continue maintaining your excellent service standards.");
  }
  
  return {
    driver_id: driver.id,
    driver_name: driver.name,
    sentiment_score: Number(sentimentScore.toFixed(1)),
    skill_analysis: {
      driving_skill: Number(skillScores.driving_skill.toFixed(1)),
      communication: Number(skillScores.communication.toFixed(1)),
      punctuality: Number(skillScores.punctuality.toFixed(1)),
      professionalism: Number(skillScores.professionalism.toFixed(1)),
      vehicle_condition: Number(skillScores.vehicle_condition.toFixed(1))
    },
    insights,
    recommendations
  };
}

// Simulate AI-generated review for a driver
function generateAIReview(driver: any): string {
  const experiencePhrases = [
    `The driver has ${driver.experience} years of experience which shows in their driving style.`,
    `With ${driver.experience} years on the road, ${driver.name} handles the vehicle confidently.`,
    `${driver.name}'s ${driver.experience} years of experience translates to a smooth ride.`
  ];
  
  const skillPhrases = [
    "Their communication was clear and timely.",
    "The vehicle was well-maintained and clean.",
    "Punctuality was excellent, arriving right on schedule.",
    "The driving was smooth and comfortable throughout the journey.",
    "Very professional attitude and appearance."
  ];
  
  // Randomly select phrases
  const randomExperienceIndex = Math.floor(Math.random() * experiencePhrases.length);
  const experienceComment = experiencePhrases[randomExperienceIndex];
  
  // Select 2-3 random skill phrases
  const selectedSkills: string[] = [];
  const numSkills = Math.floor(Math.random() * 2) + 2; // 2-3 skills
  
  for (let i = 0; i < numSkills; i++) {
    const randomIndex = Math.floor(Math.random() * skillPhrases.length);
    if (!selectedSkills.includes(skillPhrases[randomIndex])) {
      selectedSkills.push(skillPhrases[randomIndex]);
    }
  }
  
  return `${experienceComment} ${selectedSkills.join(' ')}`;
}
